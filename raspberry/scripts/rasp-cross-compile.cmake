# 目标系统环境
set(CMAKE_SYSTEM_NAME ubuntu)
set(CMAKE_SYSTEM_VERSION 5.15.0-1015-raspi)

message(STATUS "use toolchain for ${CMAKE_SYSTEM_NAME}-${CMAKE_SYSTEM_VERSION}")
# 交叉编译器架构
set(CMAKE_SYSTEM_PROCESSOR $ENV{ARM_SYSTEM_ARCH})
set(CMAKE_LIBRARY_ARCHITECTURE $ENV{ARM_LIBRARY_ARCH})
# 系统根目录
set(ARM_SYSROOT_DIR $ENV{RASP_SYSROOT_DIR})
# 交叉编译器设置
set(CMAKE_CXX_COMPILER ${CMAKE_LIBRARY_ARCHITECTURE}-g++)
set(CMAKE_C_COMPILER ${CMAKE_LIBRARY_ARCHITECTURE}-gcc)
# 交叉编译器目标环境
set(CMAKE_PREFIX_PATH $ENV{ROS2_INSTALL_PATH} ${ARM_SYSROOT_DIR} ${ARM_SYSROOT_DIR}/usr ${ARM_SYSROOT_DIR}/usr/local)
# CMake 系统文件目录
set(CMAKE_SYSROOT ${ARM_SYSROOT_DIR})

message(STATUS "SYSROOT ${CMAKE_SYSROOT}")
message(STATUS "FIND_ROOT_PATH ${CMAKE_FIND_ROOT_PATH}")
message(STATUS "SYSTEM_PROCESSOR ${CMAKE_SYSTEM_PROCESSOR}")
message(STATUS "LIBRARY_ARCHITECTURE ${CMAKE_LIBRARY_ARCHITECTURE}")


set(PYTHON_SOABI cpython-36m-${CMAKE_LIBRARY_ARCHITECTURE})

# 在宿主机内寻找应用程序
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)

# 只在目标环境内寻找包含文件和库文件
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)

set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)